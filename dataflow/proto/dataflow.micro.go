// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: dataflow.proto

/*
Package dataflow is a generated protocol buffer package.

It is generated from these files:
	dataflow.proto

It has these top-level messages:
	Schedule
	Policy
	GetPolicyRequest
	GetPolicyResponse
	CreatePolicyRequest
	CreatePolicyResponse
	UpdatePolicyRequest
	UpdatePolicyResponse
	DeletePolicyRequest
	DeletePolicyResponse
	Connector
	CreateConnectorRequest
	CreateConnectorResponse
	GetConnectorRequest
	GetConnectorResponse
	UpdateConnectorRequest
	UpdateConnectorResponse
	DeleteConnectorRequest
	DeleteConnectorResponse
	Plan
	CreatePlanRequest
	CreatePlanResponse
	GetPlanRequest
	GetPlanResponse
	UpdatePlanRequest
	UpdatePlanResponse
	DeletePlanRequest
	DeletePlanResponse
	Job
	GetJobRequest
	GetJobResponse
*/
package dataflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DataFlow service

type DataFlowService interface {
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...client.CallOption) (*GetPolicyResponse, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...client.CallOption) (*CreatePolicyResponse, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...client.CallOption) (*UpdatePolicyResponse, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...client.CallOption) (*DeletePolicyResponse, error)
	GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...client.CallOption) (*GetConnectorResponse, error)
	CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...client.CallOption) (*CreateConnectorResponse, error)
	UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, opts ...client.CallOption) (*UpdateConnectorResponse, error)
	DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...client.CallOption) (*DeleteConnectorResponse, error)
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...client.CallOption) (*GetPlanResponse, error)
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...client.CallOption) (*CreatePlanResponse, error)
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...client.CallOption) (*UpdatePlanResponse, error)
	DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...client.CallOption) (*DeletePlanResponse, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...client.CallOption) (*GetJobResponse, error)
}

type dataFlowService struct {
	c    client.Client
	name string
}

func NewDataFlowService(name string, c client.Client) DataFlowService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dataflow"
	}
	return &dataFlowService{
		c:    c,
		name: name,
	}
}

func (c *dataFlowService) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...client.CallOption) (*GetPolicyResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.GetPolicy", in)
	out := new(GetPolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...client.CallOption) (*CreatePolicyResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.CreatePolicy", in)
	out := new(CreatePolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...client.CallOption) (*UpdatePolicyResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.UpdatePolicy", in)
	out := new(UpdatePolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...client.CallOption) (*DeletePolicyResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.DeletePolicy", in)
	out := new(DeletePolicyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...client.CallOption) (*GetConnectorResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.GetConnector", in)
	out := new(GetConnectorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...client.CallOption) (*CreateConnectorResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.CreateConnector", in)
	out := new(CreateConnectorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, opts ...client.CallOption) (*UpdateConnectorResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.UpdateConnector", in)
	out := new(UpdateConnectorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...client.CallOption) (*DeleteConnectorResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.DeleteConnector", in)
	out := new(DeleteConnectorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...client.CallOption) (*GetPlanResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.GetPlan", in)
	out := new(GetPlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...client.CallOption) (*CreatePlanResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.CreatePlan", in)
	out := new(CreatePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...client.CallOption) (*UpdatePlanResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.UpdatePlan", in)
	out := new(UpdatePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...client.CallOption) (*DeletePlanResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.DeletePlan", in)
	out := new(DeletePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataFlowService) GetJob(ctx context.Context, in *GetJobRequest, opts ...client.CallOption) (*GetJobResponse, error) {
	req := c.c.NewRequest(c.name, "DataFlow.GetJob", in)
	out := new(GetJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataFlow service

type DataFlowHandler interface {
	GetPolicy(context.Context, *GetPolicyRequest, *GetPolicyResponse) error
	CreatePolicy(context.Context, *CreatePolicyRequest, *CreatePolicyResponse) error
	UpdatePolicy(context.Context, *UpdatePolicyRequest, *UpdatePolicyResponse) error
	DeletePolicy(context.Context, *DeletePolicyRequest, *DeletePolicyResponse) error
	GetConnector(context.Context, *GetConnectorRequest, *GetConnectorResponse) error
	CreateConnector(context.Context, *CreateConnectorRequest, *CreateConnectorResponse) error
	UpdateConnector(context.Context, *UpdateConnectorRequest, *UpdateConnectorResponse) error
	DeleteConnector(context.Context, *DeleteConnectorRequest, *DeleteConnectorResponse) error
	GetPlan(context.Context, *GetPlanRequest, *GetPlanResponse) error
	CreatePlan(context.Context, *CreatePlanRequest, *CreatePlanResponse) error
	UpdatePlan(context.Context, *UpdatePlanRequest, *UpdatePlanResponse) error
	DeletePlan(context.Context, *DeletePlanRequest, *DeletePlanResponse) error
	GetJob(context.Context, *GetJobRequest, *GetJobResponse) error
}

func RegisterDataFlowHandler(s server.Server, hdlr DataFlowHandler, opts ...server.HandlerOption) error {
	type dataFlow interface {
		GetPolicy(ctx context.Context, in *GetPolicyRequest, out *GetPolicyResponse) error
		CreatePolicy(ctx context.Context, in *CreatePolicyRequest, out *CreatePolicyResponse) error
		UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, out *UpdatePolicyResponse) error
		DeletePolicy(ctx context.Context, in *DeletePolicyRequest, out *DeletePolicyResponse) error
		GetConnector(ctx context.Context, in *GetConnectorRequest, out *GetConnectorResponse) error
		CreateConnector(ctx context.Context, in *CreateConnectorRequest, out *CreateConnectorResponse) error
		UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, out *UpdateConnectorResponse) error
		DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, out *DeleteConnectorResponse) error
		GetPlan(ctx context.Context, in *GetPlanRequest, out *GetPlanResponse) error
		CreatePlan(ctx context.Context, in *CreatePlanRequest, out *CreatePlanResponse) error
		UpdatePlan(ctx context.Context, in *UpdatePlanRequest, out *UpdatePlanResponse) error
		DeletePlan(ctx context.Context, in *DeletePlanRequest, out *DeletePlanResponse) error
		GetJob(ctx context.Context, in *GetJobRequest, out *GetJobResponse) error
	}
	type DataFlow struct {
		dataFlow
	}
	h := &dataFlowHandler{hdlr}
	return s.Handle(s.NewHandler(&DataFlow{h}, opts...))
}

type dataFlowHandler struct {
	DataFlowHandler
}

func (h *dataFlowHandler) GetPolicy(ctx context.Context, in *GetPolicyRequest, out *GetPolicyResponse) error {
	return h.DataFlowHandler.GetPolicy(ctx, in, out)
}

func (h *dataFlowHandler) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, out *CreatePolicyResponse) error {
	return h.DataFlowHandler.CreatePolicy(ctx, in, out)
}

func (h *dataFlowHandler) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, out *UpdatePolicyResponse) error {
	return h.DataFlowHandler.UpdatePolicy(ctx, in, out)
}

func (h *dataFlowHandler) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, out *DeletePolicyResponse) error {
	return h.DataFlowHandler.DeletePolicy(ctx, in, out)
}

func (h *dataFlowHandler) GetConnector(ctx context.Context, in *GetConnectorRequest, out *GetConnectorResponse) error {
	return h.DataFlowHandler.GetConnector(ctx, in, out)
}

func (h *dataFlowHandler) CreateConnector(ctx context.Context, in *CreateConnectorRequest, out *CreateConnectorResponse) error {
	return h.DataFlowHandler.CreateConnector(ctx, in, out)
}

func (h *dataFlowHandler) UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, out *UpdateConnectorResponse) error {
	return h.DataFlowHandler.UpdateConnector(ctx, in, out)
}

func (h *dataFlowHandler) DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, out *DeleteConnectorResponse) error {
	return h.DataFlowHandler.DeleteConnector(ctx, in, out)
}

func (h *dataFlowHandler) GetPlan(ctx context.Context, in *GetPlanRequest, out *GetPlanResponse) error {
	return h.DataFlowHandler.GetPlan(ctx, in, out)
}

func (h *dataFlowHandler) CreatePlan(ctx context.Context, in *CreatePlanRequest, out *CreatePlanResponse) error {
	return h.DataFlowHandler.CreatePlan(ctx, in, out)
}

func (h *dataFlowHandler) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, out *UpdatePlanResponse) error {
	return h.DataFlowHandler.UpdatePlan(ctx, in, out)
}

func (h *dataFlowHandler) DeletePlan(ctx context.Context, in *DeletePlanRequest, out *DeletePlanResponse) error {
	return h.DataFlowHandler.DeletePlan(ctx, in, out)
}

func (h *dataFlowHandler) GetJob(ctx context.Context, in *GetJobRequest, out *GetJobResponse) error {
	return h.DataFlowHandler.GetJob(ctx, in, out)
}
